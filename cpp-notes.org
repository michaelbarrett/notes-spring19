* Final 1 - AVL Trees
** A binary tree is either empty or has a node pointing to a left and right subtree.
** A binary search tree is a binary tree that is either empty or in which every node has a key, within its data entry, that satisfies:
> The key of the root is greater than the key in any node in the root's left subtree.
> The key of the root is less than the key in any node in the root's right subtree.
> Subtrees are, again, binary search trees.
--
No two entries in a BST may have equal keys.
We may study BSTs as a new implementation of the abstract data type /ordered list/.
A binary search tree does not have to be balanced.

#+NAME: BST class
#+BEGIN_SRC C++

template<class Record> //Records ~ keys that can be compared
class Search_tree: public Binary_tree<Record> {
  Error_code insert(const Record &new_data);
  Error_code remove(const Record &old_data);
  Error_code tree_search(Record &target) const;
}

//From general binary trees - constructors, destructor, clear, empty,
//size, height, pre- / in- / post- order traversals

#+END_SRC

"int" is used for the Record class and for the Key class.

** Search in a BST

#+NAME: BST search
#+BEGIN_SRC C++

template<class Record>
Binary_node<Record> *Search_tree<Record>::search_for_node(
  Binary_node<Record> *sub_root, const Record &target) const {
  if (sub_root == NULL || sub_root->data == target) return sub_root;
  else if (sub_root->data < target) {
    return search_for_node(sub_root->right, target);
  }
  else {
    return search_for_node(sub_root->left, target);
  }
}

//we can convert to iteration, as this is tail recursion

template<class Record>
Error_code Search_tree<Record>::tree_search(Record &target) const {
  Error_code result = success;
  Binary_node<Record> *found = search_for_node(root, target);
  if (found == NULL) {
    result = not_present;
  }
  else {
    target = found->data;
  }
  return result;
}

//implements search_for_node

#+END_SRC

BST Insert -- done such that binary search tree properties are preserved, and success code returned. Different orders of insertion can easily result in different BSTs. 
> If the keys to be inserted into an empty BST are in their natural order, then the method "insert" will produce a tree degenerating into an inefficient chain. The method "insert" should never be used with keys that are already sorted into order. Then, the tree will be inefficient (like one line).

BST Removal -- 
> Leaf: Replace the link to the removed node by null.
> Node with just one nonempty subtree: Adjust the link from the parent of the removed node to point to the root of its nonempty subtree.
*> Both left and right nonempty subtrees: 
1. Find the immediate predecessor of the node under inorder traversal by moving to its left child and then as far right as possible. Replace the removed node with this node. No problem arises in removing it because it has no right subtree.
** AVL Trees for Height Balance
In many applications, insertions/removals occur continually, with no predictable order. So it's important to optimize search times by keeping the tree nigh balanced always.

AVL trees achieve the goal that searches, insertions, and removals in a tree with n nodes can al be achieved in O(log n) time, because the height can never exceed O(log n). Thus even in the worst case, the behavior of an AVL tree could not be much below that of a random BST. In almost all cases, the actual length of a search is nigh log(n), and thus the behavior of AVL trees closely approximates that of the ideal, completely balanced BST.

Completely Balanced = Left and Right subtrees have the same height.
Balanced = Left and Right subtrees never differ by more than one.

*AVL Tree Definition*
An AVL tree is a binary search tree where the root's left and right subtree heights differ by at most 1, and where the left and right subtrees are again AVL trees.
> With each node of an AVL tree is associated a /balance factor/ that is /left-higher/, /equal-height/, or /right-higher/ according, respectively, as the left subtree has height greater to, equal to, or less than that of the right subtree.
-> Some AVL trees can be quite skewed, because the definition does not require that all leaves be on the same or adjacent levels. It only looks at the height of subtrees, not the fullness.

#+NAME: AVL impl.
#+BEGIN_SRC C++

enum Balance_factor {left_higher, equal_height, right_higher };

template <class Record>
struct AVL_node: public Binary_node<Record> {
  //additional data member
  Balance_factor balance;

  //ctors
  AVL_node();
  AVL_node(const Record &x);

  //to examine and adjust the balance factor, as "left->get_balance()"
  void set_balance(Balance_factor b);
  Balance_factor get_balance() const;
};

//Actual AVL Tree
template <class Record>
class AVL_tree: public Search_tree<Record> {
  public:
    Error_code insert(const Record &new_data);
    Error_code remove(const Record &old_data);
  private: //add auxiliary function prototypes here
}

#+END_SRC

AVL Insertion --
> Follow the usual binary tree insertion algorithm. Compare the key of the new node with that in the root, an insert the new node into the left or right subtree as appropriate.

> Often, the new node can be inserted without changing subtree height. 

> When height does change, it may be the shorter subtree that has grown, so only root balance factor changes. 

> Difficulty occurs when the new node is added to a subtree of the root that is strictly taller than the other subtree, and the height is increased. Then, one subtree would have height 2 more than the other, violating AVL requirements. 

** AVL Tree Rotations
Let's say a new node was inserted into the taller subtree of a root node and its height increased, so that now one subtree has height 2 more than the other, so the tree no longer satisfies AVL requirements. 

We must now rebuild part of the tree to restore its balance. To be definite, let us assume we have inserted the new node into the right subtree, its height has increased, and the original tree was right higher.

** AVL Tree reminders
Beelzebub is standing completely alone in a huge empty room with a big motor, which is called the left-rotation motor. It works with the energies of holy-affirming, holy-denying, and holy-reconciliating (h, h, and h+1), which reposition themselves as the roots rotate by simple link-cutting.

Then Hassein comes in with a smaller motor and Siamese twins come in behind him, one of whom is named Henry. This motor was given to him by Archangel Looisos and it works with three roots. In typical Luciferian fashion, it raises the lowest root to the highest spot and repositions the other two roots accordingly. Then the "h, <h or h-1, but one is h>, h" reposition themselves.
* Final 2 - B Trees
** A B-tree of order m is an m-way search tree in which
- All leaves are on the same level.
- All internal nodes except the root have at most m nonempty children, and at least [m/2] nonempty children.
- The number of keys in each internal node is one less than the number of its nonempty children, and these keys partition the keys in the children in the fashion of a search tree.
- The root has at most m children, but may have as few as 2 if it is not a leaf, or none if the tree consists of the root alone.
** B-tree insertion
B-trees cannot grow at their leaves. They must grow at the root.

Insertion --
> Search to see if the new key is in the tree, which terminates in failure at a leaf.
> The new key is then added to the leaf node if it is not full.
> If the leaf node is full, then split the node into two nodes site-by-side on the same lvel, and send the median key up the tree to be inserted into the parent node. On later searches therefore, a comparison with the median key will direct the search into the proper subtree.
> When a key is added to a full root, the root splits in two and the median key sent upward becomes a new root. (this is how new levels arise)
** B-tree reminders
Beelzebub goes over to his Linux PC and opens GParted, where all the partitions look like Olympic ring logos. The Siamese twins point to the root, indicating two to m children. The rest of the nodes are satiated, saying "mmmmmmm", indicating [m/2] to m children.

There are m downgoing morphisms (m for morphisms) and m-1 keys per node.

* Final 3 - Orderings
** DF Topol -- depth-first, that is, go all the way and revert putting into a stack (in-reverse)
D - devil is in reverse
** BF Topol -- a removal game, just go through and remove all w/out incoming (forward, virgin mary)
select virgins
B - virgin mary breasts
